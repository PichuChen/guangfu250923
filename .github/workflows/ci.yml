name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  build:
    name: Build & Vet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Go env
        run: go env

      - name: Download deps
        run: go mod download

      - name: Build
        run: go build ./...

      - name: Vet
        run: go vet ./...

      - name: Staticcheck (optional)
        if: always()
        uses: dominikh/staticcheck-action@v1
        with:
          version: latest
        continue-on-error: true

  lint-openapi:
    name: Validate OpenAPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install spectral
        run: |
          npm install -g @stoplight/spectral-cli
      - name: Lint openapi.yaml
        run: |
          spectral lint --ruleset .spectral.yaml openapi.yaml || exit 1

  verify-migrations:
    name: Migrate (syntax only)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Wait for Postgres
        run: |
          for i in {1..20}; do
            pg_isready -h localhost -U postgres && break
            sleep 2
          done
      - name: Run migrations
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: testdb
          DB_SSLMODE: disable
          SHEET_ID: dummy
          SHEET_TAB: Sheet1
          SHEET_INTERVAL: 5m
          PORT: 8080
        run: |
          go build ./...
          go run ./cmd/server/main.go &
          PID=$!
          sleep 5
          kill $PID || true

  # Future: add test job when tests exist
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-go@v5
  #       with:
  #         go-version-file: go.mod
  #         cache: true
  #     - run: go test ./... -race -count=1

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [build, lint-openapi, verify-migrations]
    steps:
      - name: Report
        run: echo "All required jobs finished."

  release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: [summary]
    if: startsWith(github.ref, 'refs/heads/')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build release binary (linux amd64)
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o dist/guangfu250923 ./cmd/server
          sha256sum dist/guangfu250923 > dist/guangfu250923.sha256
          cp openapi.yaml dist/openapi.yaml
          sha256sum dist/openapi.yaml > dist/openapi.yaml.sha256

      - name: Create tag & GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
            # Timestamp based version to avoid collisions
          TS=$(date -u +%Y%m%d%H%M%S)
          TAG="v${TS}-${SHORT_SHA}"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Creating release $TAG for $GITHUB_REF ($GITHUB_SHA)"
          {
            echo "Automated release from $GITHUB_REF";
            echo;
            echo "Commit: $GITHUB_SHA";
          } > release_notes.txt
          gh release create "$TAG" \
            --title "$TAG" \
            --notes-file release_notes.txt \
            dist/guangfu250923 dist/guangfu250923.sha256 \
            dist/openapi.yaml dist/openapi.yaml.sha256

      - name: Show created tag
        run: |
          echo "Created release tag: $TAG"

      - name: Trigger upgrade-service (production)
        if: github.ref == 'refs/heads/main'
        env:
          UPDATE_API_KEY: ${{ secrets.UPDATER_API_KEY }}
        run: |
          echo "Triggering remote updater..."
          ATTEMPTS=5
          URL="https://guangfu250923.pttapp.cc/upgrade-service"
          for i in $(seq 1 $ATTEMPTS); do
            STATUS=$(curl -s -o resp.json -w '%{http_code}' -H "X-API-Key: $UPDATE_API_KEY" "$URL" || true)
            echo "Attempt $i -> HTTP $STATUS"
            cat resp.json || true
            if [ "$STATUS" = "200" ] || [ "$STATUS" = "202" ]; then
              echo "Updater triggered successfully."; exit 0; fi
            sleep 5
          done
          echo "Failed to trigger updater after $ATTEMPTS attempts" >&2
          exit 1